h1. I. Entity


An entity is defined by:
* An unique identity. Her identity does not change when any of its attributes change
* A set of attributes

Examples: Customer, Order, Organization, Car ...
 
Attributes are characteristics of entities

h2. A. What is a value object (an attribute) ? 

“A Value Object cannot live on its own without an Entity.”
 
Eric Evans:
“An object that represents a descriptive aspect of the domain with no conceptual identity is called a VALUE OBJECT. VALUE OBJECTS are instantiated to represent elements of the design that we care about only for what they are, not who or which they are.” 
[Evans 2003]


Technically, a value class should :
* be serializable
* have a default constructor
* have only getter
* all member marked as final


h2. B. Interface entity 

Declare methods to :
* get entity's identity
* get/set attribute value
* test if entity contains a specific attribute name
* get a set of attributes contained in the entity

bc.. 
public interface Entity extends Identified<Reference>  {

	Reference identity();

	public <Value> Value attribute(String name) throws NullPointerException, IllegalArgumentException;

	public <Value> Entity attribute(String name, final Value value) throws NullPointerException, IllegalArgumentException;

	public boolean contains(String name) throws NullPointerException, IllegalArgumentException;

	public ImmutableSet<String> attributeNames();
	
	public MetaEntityContext metaEntityContext();
	
p. Main implementation of this interface is EntityDynamic and EntityProxy.

EntityDynamic is base class for all entities.

EntityProxy implements an InvokerHandler in order to create a proxy dynamic on a EI (entity as interface).

h2. C. Identity as Reference

Wikipedia's entry on the philosophical meaning of identity starts:

In philosophy, identity is whatever makes an entity definable and recognizable, in terms of possessing a set of qualities or characteristics that distinguish it from entities of a different type. Or, in layman's terms, identity is whatever makes stuff the same or different.



h3. Reference and URN

URN: http://en.wikipedia.org/wiki/Uniform_resource_name

A uniform resource name (URN) is a uniform resource identifier (URI) that uses the urn scheme and does not imply availability of the identified resource.


Example:

# urn:dowsers:org.intelligentsia.dowsers.sample.entity.User:identity#6787007f-f424-40b7-b240-64206b1177e2

# urn:dowsers:org.intelligentsia.dowsers.sample.entity.User:name#6787007f-f424-40b7-b240-64206b1177e2 

(1) reference a specific entity instance of User identified by '6787007f-f424-40b7-b240-64206b1177e2. 
(2) reference attribute 'name' of instance identified by '6787007f-f424-40b7-b240-64206b1177e2' with kind org.intelligentsia.dowsers.sample.entity.User.


org.intelligentsia.dowsers.sample.entity.User is the entity part

6787007f-f424-40b7-b240-64206b1177e2 is the identifier part

Note that an entity reference and a reference on identity entity's attribute is exactly the same thing


h3. Reference Provider

p. To obtain a new Reference instance, you must call:

bc. 
References.newReference(clazz)

p. Reference are created by a provider which implements ReferenceFactory interface.
The system lookup using ServiceLoader to find one. 
By default Dowsers use this class: 'com.intelligentsia.dowsers.entity.reference.ReferenceFactoryProvider' 

bc.. 
public interface ReferenceFactory {
	/**
	 * @param clazz
	 *            entity class name
	 * @return an new {@link Reference} for specified class name
	 */
	Reference newReference(Class<?> clazz);
}

p. Default implementation use an Identity provider act as a factory of identifier.
IdentifierFactoryProvider lookup in class path using ServiceLoader in order to find am implementation of IdentifierFactory.
A default provider is based on UUID scheme:

bc.. 
	/**
	 * IdentifierFactory declare method to generate new identifier.
	 * 
	 * <pre>
	 * IdentifierFactoryProvider.generateNewIdentifier();
	 * 
	 * <pre>
	 * 
	 * @author <a href="mailto:jguibert@intelligents-ia.com" >Jerome Guibert</a>
	 */
	public interface IdentifierFactory {

		/**
		 * @return a new generated identifier.
		 */
		public abstract String generateNewIdentifier();

	}
 
	/**
	 * 
	 * DefaultIdentifierFactory extends abstract and use UUID class as
	 * identifier.
	 * 
	 * @author <a href="mailto:jguibert@intelligents-ia.com" >Jerome Guibert</a>
	 */
	private class DefaultIdentifierFactory implements IdentifierFactory {

		/**
		 * @see org.intelligentsia.dowsers.domain.IdentifierFactory#generateNewIdentifier()
		 */
		@Override
		public String generateNewIdentifier() {
			return UUID.randomUUID().toString();
		}

	}




h1. II. Meta Data


h2. A. Meta Attribute


A MetaAttribute is composed of:
* name: attribute's name
* valueClass: attribute's class name


h2. B. Meta Entity

A MetaEntity define a set of meta attributes:
* name: an entity class name
* metaAttributes: entity meta attributes
* version: meta entity version

h2. C. Meta data Extension mechanism

Meta data of an entity is known as MetaEntityContext
A MetaEntityContext is a MetaEntity composite of MetaEntity. Each component is an extends of meta data given by super MetaEntity instance.
We call version of MetaEntity definition the first and initial MetaEntity set to a MetaEntityContext.

All meta data are provided by MetaEntityContextProvider. See classes under package com.intelligentsia.dowsers.entity.meta.provider.
With basic configuration all meta data are discovered at runtime.



h1. III. Use case

h2. A. Organization entity

bc.. 
public interface Organization extends Entity {

	public String name();

	public void name(String name);

	public Description annotation();

	public void annotation(Description description);

}


p. Basically, we define two attributes:
* name
* annotation
Identity attribute is herited from Entity.

Note that we could define our Organization without extending Entity interface. In this case:
* A proxy will be generated for us
* Methods References.identify must be used to obtain identity of our Organization. 



h2. B. Customization of Organization

We could do this in several way:
# By extending Organization interface and adding attribute. 
# By calling method "attribute(name, value)" on Entity. In this case, all serialized entity will contains attribute definition.
# By declaring an extra attribute in another MetaEntity and set it in our Organization Entity Context. No meta data will be saved in serialized entities.




h1. IV. Spring integration


h2. A. Configuration sample


bc.. 
	<bean
		class="com.intelligentsia.dowsers.entity.manager.MetaEntityProviderFactory">
		<property name="enableDynamicAnalyzer" value="true" />
		<!-- <property name="metaEntityProvider"></property> -->
	</bean>


	<bean 
		class="com.intelligentsia.dowsers.entity.manager.MetaEntityContextProviderFactory">
		<property name="enableCache" value="true" />
	</bean>

	<bean
		class="com.intelligentsia.dowsers.entity.manager.EntityFactoryProviderFactory">
		<property name="enableDefaultFactory" value="true" />
		<!-- factories -->
	</bean>

	<bean class="com.intelligentsia.dowsers.entity.manager.EntityStoreFactory">
		<property name="enableCachedEntities" value="true" />
		<property name="entityStore">
			<bean
				class="com.intelligentsia.dowsers.entity.store.memory.InMemoryEntityStore">
				<constructor-arg index="0">
					<bean
						class="com.intelligentsia.dowsers.entity.manager.EntityMapperFactory" />
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<bean id="entityManager"
		class="com.intelligentsia.dowsers.entity.manager.EntityManagerFactory" />


p. To run we must define:

* MetaEntityProviderFactory build a MetaEntityProvider. This class control were and how meta data are retrieved. 
* MetaEntityContextProviderFactory build a MetaEntityContextProvider. This class provide Meta Entity context for each kind of entity.
* EntityFactoryProviderFactory build a EntityFactoryProvider which be used to do a "new XXX" what ever XXX is.
* EntityStoreFactory build a EntityStore which store entities. In this configuration we define an InMemoryEntityStore so all is memory resident. You could implement simple entity store on mongo db, Jackrabbit, fiule system, or a relational database... EntityMapperFactory build an EntityMapper which be used to serialize entities (based on Jackson framework). 
* EntityManagerFactory build EntityManager. This class will be used to perform all CRUD and "new" operation on entities.



h1. Terminology

Adapted from JSR 351

**Entity**
An object that may be identified or described by a collection of Attributes.

**Attribute**
A named value.

**Attribute Value**
A quantitative or existential representation of the property or characteristic conveyed by the Attribute. A value may be empty (as distinct from the Attribute being undefined), a scalar, an Object, or a collection of Objects.

**Identity Attribute**
An Attribute that identify a specific instance of an entity.

**Attribute Meta-data**
A uniform taxonomy of characteristics that may be associated with an Attribute and where such characteristics are deemed necessary or appropriate to effect or enable the use of the value. Such information may establish its validity period, or more generally define constraints or tags that effect the use of the value.

**Entity Meta-data**
A collection of Attribute Meta-data which apply on a specific entity version.  

**Entity Meta-data Context**
A collection of Attribute Meta-data which apply on a specific entity. Generally its an instance of entity meta-data.
But, it could be an aggregation of entity meta-data.


**Meta Entity Reference**
An attribute that identify or describe a meta entity/ entity class name

urn:dowsers:{entity class name}

**Entity Reference**
A collection of Attributes that identify or describe an Entity. 

urn:dowsers:{meta entity reference}:identity@{identity attribute}

**Attribute Reference**
A representation of an Attribute that does not convey the value of the associated Attribute, that may be communicated between Entities without exposing the Attribute value.

urn:dowsers:{meta entity reference}:{attribute name}@{entity identity attribute}

**Meta Entity Context Provider**
A service which build meta entity context from meta entity provider.

**Meta Entity Repository**
A service or data store that contains meta data on Entity and Attribute values.
